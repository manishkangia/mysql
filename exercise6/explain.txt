id: which SELECT the row belongs to
    – If only one SELECT with no subquery or UNION, then 
    everything is 1
    – Otherwise, generally numbered sequentially
Simple/complex types :
• simple: there is only one SELECT in the whole query
• 3 subtypes of complex: subquery, derived, union.
    – subquery: numbered according to position in SQL text
    – derived (subquery in the FROM clause): executed as a temp 
    table
    – union: rows are spooled into a temp table, then read out with a 
    NULL id in a row that says UNION RESULT
    
table: the table accessed, or its alias
– <derivedN>, where N is the subquery's id column

select_type shows whether it's a simple or complex 
select, and which type of complex select (PRIMARY, 
SUBQUERY, DERIVED, UNION, UNION RESULT)


type: the “join type”
– ALL, index, range, ref, eq_ref, const, system, NULL

possible_keys: which indexes looked useful to the 
optimizer
– the indexes that can help make row lookups efficient

key: which index(es) the optimizer chose
– the index(es) the optimizer chose to minimize overall query 
cost
– not the same thing as making row lookups efficient!
– optimizer cost metric is based on disk reads

key_len: the number of bytes of the index MySQL will 
use
– MySQL uses only a leftmost prefix of the index
– multibyte character sets make byte != character

ref: which columns/constants from preceding tables 
are used for lookups in the index named in the key 
column

rows: estimated number of rows to read
– for every loop in the nested-loop join plan
– doesn't reflect LIMIT in 5.0 and earlier

The Extra column: very important!
• Some possible values
– Using index: covering index
– Using where: server post-filters rows from storage engine
– Using temporary: an implicit temporary table (for sorting or 
grouping rows, DISTINCT)
• No indication of whether the temp table is on disk or in memory
– Using filesort: external sort to order results
• No indication of whether this is an on-disk filesort or in-memory
• No indication of which filesort algorithm MySQL plans to use

2.1 
The value is same as thats the total number of rows in the table and also the total number of rows sql will look-in to find the match.

2.2 you can optimize this by making making an index on id attribute.

3. make an index in order ( user_id,commentable_id,commentable_type)

4.explain select article_index,category from (select article_index,category,user_id,count(comment) as number from articles inner join comments using (article_index,user_id) group by article_index,user_id) as temp_table where number >1;
+----+-------------+------------+-------+-----------------+---------+---------+-------------------------------------------------------------+------+-------------+
| id | select_type | table      | type  | possible_keys   | key     | key_len | ref                                                         | rows | Extra       |
+----+-------------+------------+-------+-----------------+---------+---------+-------------------------------------------------------------+------+-------------+
|  1 | PRIMARY     | <derived2> | ALL   | NULL            | NULL    | NULL    | NULL                                                        |    3 | Using where |
|  2 | DERIVED     | articles   | index | PRIMARY,user_id | PRIMARY | 8       | NULL                                                        |    8 |             |
|  2 | DERIVED     | comments   | ref   | user_id         | user_id | 8       | stevejobs.articles.user_id,stevejobs.articles.article_index |    1 |             |
+----+-------------+------------+-------+-----------------+---------+---------+-------------------------------------------------------------+------+-------------+
3 rows in set (0.00 sec)

explanation :: the first selection is a simple selection performed on a dervied table with id '2' using no keys browsing through 3 columns and using where clause;
the second is a selection performed in a derived section on table articles , index-type search with the primary key and an index on user_id column as the possible keys using key_len of 8 bytes.
the third is a selection performed in a derived section on table comments , using index on user_id as the possible key and using index on user_id and article_index for referrence.
the last selection as rows set as 1 . Its due to the index used on the columns user_id and article_index in the join .

mysql> explain select article_index from (select article_index,user_id,count(comment) as number from comments where (article_index,user_id) in (select article_index,user_id from articles) group by article_index,user_id) as temp_table where number >1;
+----+--------------------+------------+-----------------+-----------------+---------+---------+-----------+------+----------------------------------------------+
| id | select_type        | table      | type            | possible_keys   | key     | key_len | ref       | rows | Extra                                        |
+----+--------------------+------------+-----------------+-----------------+---------+---------+-----------+------+----------------------------------------------+
|  1 | PRIMARY            | <derived2> | ALL             | NULL            | NULL    | NULL    | NULL      |    3 | Using where                                  |
|  2 | DERIVED            | comments   | ALL             | NULL            | NULL    | NULL    | NULL      |    9 | Using where; Using temporary; Using filesort |
|  3 | DEPENDENT SUBQUERY | articles   | unique_subquery | PRIMARY,user_id | PRIMARY | 8       | func,func |    1 | Using index; Using where                     |
+----+--------------------+------------+-----------------+-----------------+---------+---------+-----------+------+----------------------------------------------+
3 rows in set (0.00 sec)

inner join makes use of indexes and does the operation with less no. of rows . For tables with numerous rows, the difference will be considerable.




